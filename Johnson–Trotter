#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define LEFT -1
#define RIGHT 1

// Function to print the permutation
void printPermutation(int perm[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", perm[i]);
    printf("\n");
}

// Function to find the largest mobile integer
int getMobile(int perm[], int dir[], int n) {
    int mobile = 0;
    for (int i = 0; i < n; i++) {
        int next = i + dir[i];
        if (next >= 0 && next < n && perm[i] > perm[next]) {
            if (mobile == 0 || perm[i] > mobile)
                mobile = perm[i];
        }
    }
    return mobile;
}

// Function to find position of an element
int findPosition(int perm[], int n, int mobile) {
    for (int i = 0; i < n; i++) {
        if (perm[i] == mobile)
            return i;
    }
    return -1;
}

// Johnson-Trotter implementation
void johnsonTrotter(int n) {
    int perm[n], dir[n];

    // Initialize permutation and directions
    for (int i = 0; i < n; i++) {
        perm[i] = i + 1;
        dir[i] = LEFT;
    }

    printPermutation(perm, n);

    while (1) {
        int mobile = getMobile(perm, dir, n);
        if (mobile == 0) break;

        int pos = findPosition(perm, n, mobile);
        int nextPos = pos + dir[pos];

        // Swap the mobile element
        int temp = perm[pos];
        perm[pos] = perm[nextPos];
        perm[nextPos] = temp;

        // Swap directions
        temp = dir[pos];
        dir[pos] = dir[nextPos];
        dir[nextPos] = temp;

        // Update mobile element's position
        pos = nextPos;

        // Reverse direction of elements greater than mobile
        for (int i = 0; i < n; i++) {
            if (perm[i] > mobile)
                dir[i] = -dir[i];
        }

        printPermutation(perm, n);
    }
}

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    johnsonTrotter(n);
    return 0;
}
output:
Enter the number of elements: 4
1 2 3 4
1 2 4 3
1 4 2 3
4 1 2 3
4 1 3 2
1 4 3 2
1 3 4 2
1 3 2 4
3 1 2 4
3 1 4 2
3 4 1 2
4 3 1 2
4 3 2 1
3 4 2 1
3 2 4 1
3 2 1 4
2 3 1 4
2 3 4 1
2 4 3 1
4 2 3 1
4 2 1 3
2 4 1 3
2 1 4 3
2 1 3 4
1 2 3 4
