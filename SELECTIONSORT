2 SELECTION SORT
#include <stdio.h>
#include <time.h>
#include <stdlib.h>  // Needed for exit()

void selsort(int n, int a[]);

int main() {
    int a[15000], n, i, j, ch, temp;
    clock_t start, end;

    while (1) {
        printf("\n1: Manual entry of N and array elements");
        printf("\n2: Display time taken for sorting N elements from 500 to 14500");
        printf("\n3: Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
        case 1:
            printf("\nEnter the number of elements: ");
            scanf("%d", &n);
            if (n > 15000) {
                printf("Limit exceeded! Maximum allowed is 15000.\n");
                break;
            }

            printf("Enter array elements:\n");
            for (i = 0; i < n; i++) {
                scanf("%d", &a[i]);
            }

            start = clock();
            selsort(n, a);
            end = clock();

            printf("Sorted array is:\n");
            for (i = 0; i < n; i++) {
                printf("%d\t", a[i]);
            }

            printf("\nTime taken to sort %d numbers is %f seconds\n",
                   n, ((double)(end - start)) / CLOCKS_PER_SEC);
            break;

        case 2:
            n = 500;
            while (n <= 14500) {
                for (i = 0; i < n; i++) {
                    a[i] = n - i;  // Reverse order to simulate worst case
                }

                start = clock();
                selsort(n, a);

                // Dummy loop to simulate real processing time
                for (j = 0; j < 500000; j++) {
                    temp = 38 / 600;
                }

                end = clock();
                printf("Time taken to sort %d numbers is %f seconds\n",
                       n, ((double)(end - start)) / CLOCKS_PER_SEC);
                n += 1000;
            }
            break;

        case 3:
            exit(0);
        default:
            printf("Invalid choice. Please enter 1, 2 or 3.\n");
        }
    }

    return 0;
}

// Selection sort algorithm
void selsort(int n, int a[]) {
    int i, j, t, small, pos;
    for (i = 0; i < n - 1; i++) {
        pos = i;
        small = a[i];
        for (j = i + 1; j < n; j++) {
            if (a[j] < small) {
                small = a[j];
                pos = j;
            }
        }
        t = a[i];
        a[i] = a[pos];
        a[pos] = t;
    }
}
