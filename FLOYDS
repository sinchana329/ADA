Floydâ€™s Algorithm for All-Pairs Shortest Paths
#include <stdio.h>
#define INF 999

int a[10][10], D[10][10], n;

int min(int a, int b) {
    return (a < b) ? a : b;
}

void floyd(int a[][10], int n) {
    int i, j, k;
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            D[i][j] = a[i][j];

    for (k = 0; k < n; k++)
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                D[i][j] = min(D[i][j], D[i][k] + D[k][j]);
}

int main() {
    int i, j;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the cost adjacency matrix (use %d for INF):\n", INF);
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);

    floyd(a, n);

    printf("Distance Matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            printf("%d ", D[i][j]);
        printf("\n");
    }

    return 0;
}
