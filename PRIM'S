A. Find Minimum Cost Spanning Tree of a given undirected graph using
Primâ€™s algorithm.
#include <stdio.h>

int cost[10][10], n, t[10][2], sum = 0;

void prims(int cost[10][10], int n);

int main() {
    int i, j;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)  // Replace 0 with a large value to avoid self-loops
                cost[i][j] = 999;
        }
    }

    prims(cost, n);

    printf("Edges of the Minimum Cost Spanning Tree:\n");
    for (i = 0; i < n - 1; i++) {
        printf("(%d, %d)\n", t[i][0], t[i][1]);
    }
    printf("Total cost of Minimum Spanning Tree: %d\n", sum);

    return 0;
}

void prims(int cost[10][10], int n) {
    int d[10], p[10], s[10];
    int i, j, u, v, min, k = 0;

    // Initialization
    for (i = 0; i < n; i++) {
        d[i] = cost[0][i]; // Distance from source (0) to others
        p[i] = 0;          // Predecessor
        s[i] = 0;          // Visited
    }

    s[0] = 1; // Start with vertex 0

    for (i = 0; i < n - 1; i++) {
        min = 999;
        u = -1;

        // Find vertex u not in MST with smallest distance
        for (j = 0; j < n; j++) {
            if (s[j] == 0 && d[j] < min) {
                min = d[j];
                u = j;
            }
        }

        if (u == -1) return; // All vertices visited

        // Add edge (u, p[u]) to MST
        t[k][0] = u;
        t[k][1] = p[u];
        k++;
        sum += cost[u][p[u]];
        s[u] = 1;

        // Update d[] and p[]
        for (v = 0; v < n; v++) {
            if (s[v] == 0 && cost[u][v] < d[v]) {
                d[v] = cost[u][v];
                p[v] = u;
            }
        }
    }
}
