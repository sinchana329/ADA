#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void heapify(int a[], int n, int i) {
    int largest = i;        // Initialize largest as root
    int left = 2 * i + 1;   // left = 2*i + 1
    int right = 2 * i + 2;  // right = 2*i + 2

    if (left < n && a[left] > a[largest])
        largest = left;

    if (right < n && a[right] > a[largest])
        largest = right;

    if (largest != i) {
        int temp = a[i];
        a[i] = a[largest];
        a[largest] = temp;

        // Recursively heapify the affected sub-tree
        heapify(a, n, largest);
    }
}

void heapSort(int a[], int n) {
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(a, n, i);

    // One by one extract an element from heap
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        int temp = a[0];
        a[0] = a[i];
        a[i] = temp;

        // call max heapify on the reduced heap
        heapify(a, i, 0);
    }
}

int main() {
    int n, i;
    clock_t start, end;
    double time_taken;

    printf("Enter number of elements to sort: ");
    scanf("%d", &n);

    int* a = (int*)malloc(n * sizeof(int));
    if (!a) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    // Generate random numbers
    printf("Generating random numbers...\n");
    srand(time(NULL));
    for (i = 0; i < n; i++)
        a[i] = rand() % 10000;

    start = clock();
    heapSort(a, n);
    end = clock();

    time_taken = (double)(end - start) / CLOCKS_PER_SEC;

    printf("Sorted elements (first 10 shown):\n");
    for (i = 0; i < (n > 10 ? 10 : n); i++)
        printf("%d ", a[i]);
    printf("\nTime taken to sort %d elements: %.6f seconds\n", n, time_taken);

    free(a);
    return 0;
}
