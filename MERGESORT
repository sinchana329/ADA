1.Sort a given set of N integer elements using Merge Sort technique and
compute its time taken. Run the program for different values of N and
record the time taken to sort.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function declarations
void merge_sort(int a[], int low, int high);
void merge(int a[], int low, int mid, int high);

int main() {
    int *a, n, i;
    clock_t start, end;
    double time_taken;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    // Dynamically allocate memory based on n
    a = (int *)malloc(n * sizeof(int));
    if (a == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    printf("Enter the array elements:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    start = clock();  // Start timing
    merge_sort(a, 0, n - 1);
    end = clock();    // End timing

    time_taken = (double)(end - start) / CLOCKS_PER_SEC;

    printf("Sorted array:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    printf("Time taken to sort: %f seconds\n", time_taken);

    free(a);  // Free dynamically allocated memory
    return 0;
}

// Recursive merge sort function
void merge_sort(int a[], int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
        merge_sort(a, low, mid);
        merge_sort(a, mid + 1, high);
        merge(a, low, mid, high);
    }
}

// Merge two sorted halves
void merge(int a[], int low, int mid, int high) {
    int i = low, j = mid + 1, k = 0;
    int *temp = (int *)malloc((high - low + 1) * sizeof(int));

    if (temp == NULL) {
        printf("Memory allocation failed during merge.\n");
        exit(1);
    }

    while (i <= mid && j <= high) {
        if (a[i] < a[j]) {
            temp[k++] = a[i++];
        } else {
            temp[k++] = a[j++];
        }
    }

    while (i <= mid) temp[k++] = a[i++];
    while (j <= high) temp[k++] = a[j++];

    for (i = low, k = 0; i <= high; i++, k++) {
        a[i] = temp[k];
    }

    free(temp);
}
